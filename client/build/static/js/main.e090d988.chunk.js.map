{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/actions.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","utils/reducers.js","utils/store.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","dispatch","useDispatch","state","useSelector","image","name","price","quantity","cart","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","ProductList","currentCategory","useQuery","loading","data","useEffect","products","forEach","then","length","filter","category","map","key","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","initialState","reducers","action","newState","createStore","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e090d988.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\r\n  if (count === 1) {\r\n    return name;\r\n  }\r\n  return name + 's';\r\n}\r\n\r\nexport function idbPromise(storeName, method, object) {\r\n  return new Promise((resolve, reject) => {\r\n    const request = window.indexedDB.open('shop-shop', 1);\r\n    let db, tx, store;\r\n    request.onupgradeneeded = function(e) {\r\n      const db = request.result;\r\n      db.createObjectStore('products', { keyPath: '_id' });\r\n      db.createObjectStore('categories', { keyPath: '_id' });\r\n      db.createObjectStore('cart', { keyPath: '_id' });\r\n    };\r\n\r\n    request.onerror = function(e) {\r\n      console.log('There was an error');\r\n    };\r\n\r\n    request.onsuccess = function(e) {\r\n      db = request.result;\r\n      tx = db.transaction(storeName, 'readwrite');\r\n      store = tx.objectStore(storeName);\r\n\r\n      db.onerror = function(e) {\r\n        console.log('error', e);\r\n      };\r\n\r\n      switch (method) {\r\n        case 'put':\r\n          store.put(object);\r\n          resolve(object);\r\n          break;\r\n        case 'get':\r\n          const all = store.getAll();\r\n          all.onsuccess = function() {\r\n            resolve(all.result);\r\n          };\r\n          break;\r\n        case 'delete':\r\n          store.delete(object._id);\r\n          break;\r\n        default:\r\n          console.log('No valid method');\r\n          break;\r\n      }\r\n\r\n      tx.oncomplete = function() {\r\n        db.close();\r\n      };\r\n    };\r\n  });\r\n}\r\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\n\r\nexport const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\nexport const CLEAR_CART = \"CLEAR_CART\";\r\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\r\nexport const TOGGLE_CART = \"TOGGLE_CART\";\r\n\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pluralize } from \"../../utils/helpers\";\r\n//import { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nfunction ProductItem(item) {\r\n\t//const [state, dispatch] = useStoreContext();\r\n\tconst dispatch = useDispatch();\r\n\tconst state = useSelector((state) => state);\r\n\r\n\tconst { image, name, _id, price, quantity } = item;\r\n\r\n\tconst { cart } = state;\r\n\r\n\tconst addToCart = () => {\r\n\t\tconst itemInCart = cart.find((cartItem) => cartItem._id === _id);\r\n\t\tif (itemInCart) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: UPDATE_CART_QUANTITY,\r\n\t\t\t\t_id: _id,\r\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n\t\t\t});\r\n\t\t\tidbPromise(\"cart\", \"put\", {\r\n\t\t\t\t...itemInCart,\r\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ADD_TO_CART,\r\n\t\t\t\tproduct: { ...item, purchaseQuantity: 1 },\r\n\t\t\t});\r\n\t\t\tidbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: 1 });\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"card px-1 py-1\">\r\n\t\t\t<Link to={`/products/${_id}`}>\r\n\t\t\t\t<img alt={name} src={`/images/${image}`} />\r\n\t\t\t\t<p>{name}</p>\r\n\t\t\t</Link>\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{quantity} {pluralize(\"item\", quantity)} in stock\r\n\t\t\t\t</div>\r\n\t\t\t\t<span>${price}</span>\r\n\t\t\t</div>\r\n\t\t\t<button onClick={addToCart}>Add to cart</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ProductItem;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_PRODUCTS = gql`\r\n  query getProducts($category: ID) {\r\n    products(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CHECKOUT = gql`\r\n  query getCheckout($products: [ID]!) {\r\n    checkout(products: $products) {\r\n      session\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ALL_PRODUCTS = gql`\r\n  {\r\n    products {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CATEGORIES = gql`\r\n  {\r\n    categories {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n  {\r\n    user {\r\n      firstName\r\n      lastName\r\n      orders {\r\n        _id\r\n        purchaseDate\r\n        products {\r\n          _id\r\n          name\r\n          description\r\n          price\r\n          quantity\r\n          image\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect } from \"react\";\r\nimport ProductItem from \"../ProductItem\";\r\n//import { useStoreContext } from '../../utils/GlobalState';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport spinner from \"../../assets/spinner.gif\";\r\n\r\nfunction ProductList() {\r\n\t// const [state, dispatch] = useStoreContext();\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst state = useSelector((state) => state);\r\n\r\n\tconst { currentCategory } = state;\r\n\r\n\tconst { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (data) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: UPDATE_PRODUCTS,\r\n\t\t\t\tproducts: data.products,\r\n\t\t\t});\r\n\t\t\tdata.products.forEach((product) => {\r\n\t\t\t\tidbPromise(\"products\", \"put\", product);\r\n\t\t\t});\r\n\t\t} else if (!loading) {\r\n\t\t\tidbPromise(\"products\", \"get\").then((products) => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: UPDATE_PRODUCTS,\r\n\t\t\t\t\tproducts: products,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}, [data, loading, dispatch]);\r\n\r\n\tfunction filterProducts() {\r\n\t\tif (!currentCategory) {\r\n\t\t\treturn state.products;\r\n\t\t}\r\n\r\n\t\treturn state.products.filter(\r\n\t\t\t(product) => product.category._id === currentCategory\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"my-2\">\r\n\t\t\t<h2>Our Products:</h2>\r\n\t\t\t{state.products.length ? (\r\n\t\t\t\t<div className=\"flex-row\">\r\n\t\t\t\t\t{filterProducts().map((product) => (\r\n\t\t\t\t\t\t<ProductItem\r\n\t\t\t\t\t\t\tkey={product._id}\r\n\t\t\t\t\t\t\t_id={product._id}\r\n\t\t\t\t\t\t\timage={product.image}\r\n\t\t\t\t\t\t\tname={product.name}\r\n\t\t\t\t\t\t\tprice={product.price}\r\n\t\t\t\t\t\t\tquantity={product.quantity}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<h3>You haven't added any products yet!</h3>\r\n\t\t\t)}\r\n\t\t\t{loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ProductList;\r\n","import React, { useEffect } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\n//import { useStoreContext } from '../../utils/GlobalState';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n\tUPDATE_CATEGORIES,\r\n\tUPDATE_CURRENT_CATEGORY,\r\n} from \"../../utils/actions\";\r\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nfunction CategoryMenu() {\r\n\t//const [state, dispatch] = useStoreContext();\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst state = useSelector((state) => state);\r\n\r\n\tconst { categories } = state;\r\n\r\n\tconst { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (categoryData) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: UPDATE_CATEGORIES,\r\n\t\t\t\tcategories: categoryData.categories,\r\n\t\t\t});\r\n\t\t\tcategoryData.categories.forEach((category) => {\r\n\t\t\t\tidbPromise(\"categories\", \"put\", category);\r\n\t\t\t});\r\n\t\t} else if (!loading) {\r\n\t\t\tidbPromise(\"categories\", \"get\").then((categories) => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: UPDATE_CATEGORIES,\r\n\t\t\t\t\tcategories: categories,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}, [categoryData, loading, dispatch]);\r\n\r\n\tconst handleClick = (id) => {\r\n\t\tdispatch({\r\n\t\t\ttype: UPDATE_CURRENT_CATEGORY,\r\n\t\t\tcurrentCategory: id,\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>Choose a Category:</h2>\r\n\t\t\t{categories.map((item) => (\r\n\t\t\t\t<button\r\n\t\t\t\t\tkey={item._id}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\thandleClick(item._id);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{item.name}\r\n\t\t\t\t</button>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CategoryMenu;\r\n","import React from \"react\";\r\n//import { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nconst CartItem = ({ item }) => {\r\n\t// const [, dispatch] = useStoreContext();\r\n\tconst dispatch = useDispatch();\r\n\t//const state = useSelector((state) => state);\r\n\tconst removeFromCart = (item) => {\r\n\t\tdispatch({\r\n\t\t\ttype: REMOVE_FROM_CART,\r\n\t\t\t_id: item._id,\r\n\t\t});\r\n\t\tidbPromise(\"cart\", \"delete\", { ...item });\r\n\t};\r\n\r\n\tconst onChange = (e) => {\r\n\t\tconst value = e.target.value;\r\n\t\tif (value === \"0\") {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: REMOVE_FROM_CART,\r\n\t\t\t\t_id: item._id,\r\n\t\t\t});\r\n\t\t\tidbPromise(\"cart\", \"delete\", { ...item });\r\n\t\t} else {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: UPDATE_CART_QUANTITY,\r\n\t\t\t\t_id: item._id,\r\n\t\t\t\tpurchaseQuantity: parseInt(value),\r\n\t\t\t});\r\n\t\t\tidbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: parseInt(value) });\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"flex-row\">\r\n\t\t\t<div>\r\n\t\t\t\t<img src={`/images/${item.image}`} alt=\"\" />\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{item.name}, ${item.price}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<span>Qty:</span>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\tplaceholder=\"1\"\r\n\t\t\t\t\t\tvalue={item.purchaseQuantity}\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\trole=\"img\"\r\n\t\t\t\t\t\taria-label=\"trash\"\r\n\t\t\t\t\t\tonClick={() => removeFromCart(item)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t🗑️\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CartItem;\r\n","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useEffect } from \"react\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { QUERY_CHECKOUT } from \"../../utils/queries\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport CartItem from \"../CartItem\";\r\nimport Auth from \"../../utils/auth\";\r\n//import { useStoreContext } from '../../utils/GlobalState';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\r\nimport \"./style.css\";\r\n\r\nconst stripePromise = loadStripe(\"pk_test_TYooMQauvdEDq54NiTphI7jx\");\r\n\r\nconst Cart = () => {\r\n\t//  const [state, dispatch] = useStoreContext();\r\n\tconst dispatch = useDispatch();\r\n\tconst state = useSelector((state) => state);\r\n\tconst [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (data) {\r\n\t\t\tstripePromise.then((res) => {\r\n\t\t\t\tres.redirectToCheckout({ sessionId: data.checkout.session });\r\n\t\t\t});\r\n\t\t}\r\n\t}, [data]);\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function getCart() {\r\n\t\t\tconst cart = await idbPromise(\"cart\", \"get\");\r\n\t\t\tdispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\r\n\t\t}\r\n\r\n\t\tif (!state.cart.length) {\r\n\t\t\tgetCart();\r\n\t\t}\r\n\t}, [state.cart.length, dispatch]);\r\n\r\n\tfunction toggleCart() {\r\n\t\tdispatch({ type: TOGGLE_CART });\r\n\t}\r\n\r\n\tfunction calculateTotal() {\r\n\t\tlet sum = 0;\r\n\t\tstate.cart.forEach((item) => {\r\n\t\t\tsum += item.price * item.purchaseQuantity;\r\n\t\t});\r\n\t\treturn sum.toFixed(2);\r\n\t}\r\n\r\n\tfunction submitCheckout() {\r\n\t\tconst productIds = [];\r\n\r\n\t\tstate.cart.forEach((item) => {\r\n\t\t\tfor (let i = 0; i < item.purchaseQuantity; i++) {\r\n\t\t\t\tproductIds.push(item._id);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tgetCheckout({\r\n\t\t\tvariables: { products: productIds },\r\n\t\t});\r\n\t}\r\n\r\n\tif (!state.cartOpen) {\r\n\t\treturn (\r\n\t\t\t<div className=\"cart-closed\" onClick={toggleCart}>\r\n\t\t\t\t<span role=\"img\" aria-label=\"trash\">\r\n\t\t\t\t\t🛒\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"cart\">\r\n\t\t\t<div className=\"close\" onClick={toggleCart}>\r\n\t\t\t\t[close]\r\n\t\t\t</div>\r\n\t\t\t<h2>Shopping Cart</h2>\r\n\t\t\t{state.cart.length ? (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{state.cart.map((item) => (\r\n\t\t\t\t\t\t<CartItem key={item._id} item={item} />\r\n\t\t\t\t\t))}\r\n\r\n\t\t\t\t\t<div className=\"flex-row space-between\">\r\n\t\t\t\t\t\t<strong>Total: ${calculateTotal()}</strong>\r\n\r\n\t\t\t\t\t\t{Auth.loggedIn() ? (\r\n\t\t\t\t\t\t\t<button onClick={submitCheckout}>Checkout</button>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<span>(log in to check out)</span>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<h3>\r\n\t\t\t\t\t<span role=\"img\" aria-label=\"shocked\">\r\n\t\t\t\t\t\t😱\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\tYou haven't added anything to your cart yet!\r\n\t\t\t\t</h3>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Cart;\r\n","import React from \"react\";\r\nimport ProductList from \"../components/ProductList\";\r\nimport CategoryMenu from \"../components/CategoryMenu\";\r\nimport Cart from \"../components/Cart\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <CategoryMenu />\r\n      <ProductList />\r\n      <Cart />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Cart from \"../components/Cart\";\r\n//import { useStoreContext } from '../utils/GlobalState';\r\nimport {\r\n\tREMOVE_FROM_CART,\r\n\tUPDATE_CART_QUANTITY,\r\n\tADD_TO_CART,\r\n\tUPDATE_PRODUCTS,\r\n} from \"../utils/actions\";\r\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\r\nimport { idbPromise } from \"../utils/helpers\";\r\nimport spinner from \"../assets/spinner.gif\";\r\n\r\nfunction Detail() {\r\n\t// const [state, dispatch] = useStoreContext();\r\n\tconst dispatch = useDispatch();\r\n\tconst state = useSelector((state) => state);\r\n\tconst { id } = useParams();\r\n\r\n\tconst [currentProduct, setCurrentProduct] = useState({});\r\n\r\n\tconst { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n\tconst { products, cart } = state;\r\n\r\n\tuseEffect(() => {\r\n\t\t// already in global store\r\n\t\tif (products.length) {\r\n\t\t\tsetCurrentProduct(products.find((product) => product._id === id));\r\n\t\t}\r\n\t\t// retrieved from server\r\n\t\telse if (data) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: UPDATE_PRODUCTS,\r\n\t\t\t\tproducts: data.products,\r\n\t\t\t});\r\n\r\n\t\t\tdata.products.forEach((product) => {\r\n\t\t\t\tidbPromise(\"products\", \"put\", product);\r\n\t\t\t});\r\n\t\t}\r\n\t\t// get cache from idb\r\n\t\telse if (!loading) {\r\n\t\t\tidbPromise(\"products\", \"get\").then((indexedProducts) => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: UPDATE_PRODUCTS,\r\n\t\t\t\t\tproducts: indexedProducts,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}, [products, data, loading, dispatch, id]);\r\n\r\n\tconst addToCart = () => {\r\n\t\tconst itemInCart = cart.find((cartItem) => cartItem._id === id);\r\n\t\tif (itemInCart) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: UPDATE_CART_QUANTITY,\r\n\t\t\t\t_id: id,\r\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n\t\t\t});\r\n\t\t\tidbPromise(\"cart\", \"put\", {\r\n\t\t\t\t...itemInCart,\r\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ADD_TO_CART,\r\n\t\t\t\tproduct: { ...currentProduct, purchaseQuantity: 1 },\r\n\t\t\t});\r\n\t\t\tidbPromise(\"cart\", \"put\", { ...currentProduct, purchaseQuantity: 1 });\r\n\t\t}\r\n\t};\r\n\r\n\tconst removeFromCart = () => {\r\n\t\tdispatch({\r\n\t\t\ttype: REMOVE_FROM_CART,\r\n\t\t\t_id: currentProduct._id,\r\n\t\t});\r\n\r\n\t\tidbPromise(\"cart\", \"delete\", { ...currentProduct });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{currentProduct && cart ? (\r\n\t\t\t\t<div className=\"container my-1\">\r\n\t\t\t\t\t<Link to=\"/\">← Back to Products</Link>\r\n\r\n\t\t\t\t\t<h2>{currentProduct.name}</h2>\r\n\r\n\t\t\t\t\t<p>{currentProduct.description}</p>\r\n\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<strong>Price:</strong>${currentProduct.price}{\" \"}\r\n\t\t\t\t\t\t<button onClick={addToCart}>Add to Cart</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tdisabled={!cart.find((p) => p._id === currentProduct._id)}\r\n\t\t\t\t\t\t\tonClick={removeFromCart}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tRemove from Cart\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</p>\r\n\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc={`/images/${currentProduct.image}`}\r\n\t\t\t\t\t\talt={currentProduct.name}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t) : null}\r\n\t\t\t{loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n\t\t\t<Cart />\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Detail;\r\n","import React from \"react\";\r\n\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div\r\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nconst NoMatch = () => {\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>404 Page Not Found</h1>\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n            🙄\r\n          </span>\r\n        </h1>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_ORDER = gql`\r\n  mutation addOrder($products: [ID]!) {\r\n    addOrder(products: $products) {\r\n      purchaseDate\r\n      products {\r\n        _id\r\n        name\r\n        description\r\n        price\r\n        quantity\r\n        category {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser(\r\n    $firstName: String!\r\n    $lastName: String!\r\n    $email: String!\r\n    $password: String!\r\n  ) {\r\n    addUser(\r\n      firstName: $firstName\r\n      lastName: $lastName\r\n      email: $email\r\n      password: $password\r\n    ) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport { LOGIN } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nfunction Login(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [login, { error }] = useMutation(LOGIN);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const mutationResponse = await login({\r\n        variables: { email: formState.email, password: formState.password },\r\n      });\r\n      const token = mutationResponse.data.login.token;\r\n      Auth.login(token);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/signup\">← Go to Signup</Link>\r\n\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email address:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {error ? (\r\n          <div>\r\n            <p className=\"error-text\">The provided credentials are incorrect</p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport Auth from '../utils/auth';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nfunction Signup(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const mutationResponse = await addUser({\r\n      variables: {\r\n        email: formState.email,\r\n        password: formState.password,\r\n        firstName: formState.firstName,\r\n        lastName: formState.lastName,\r\n      },\r\n    });\r\n    const token = mutationResponse.data.addUser.token;\r\n    Auth.login(token);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/login\">← Go to Login</Link>\r\n\r\n      <h2>Signup</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"firstName\">First Name:</label>\r\n          <input\r\n            placeholder=\"First\"\r\n            name=\"firstName\"\r\n            type=\"firstName\"\r\n            id=\"firstName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"lastName\">Last Name:</label>\r\n          <input\r\n            placeholder=\"Last\"\r\n            name=\"lastName\"\r\n            type=\"lastName\"\r\n            id=\"lastName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport Auth from \"../../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n\r\n  function showNavigation() {\r\n    if (Auth.loggedIn()) {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/orderHistory\">\r\n              Order History\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\r\n            <a href=\"/\" onClick={() => Auth.logout()}>\r\n              Logout\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      );\r\n    } else {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/signup\">\r\n              Signup\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/login\">\r\n              Login\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <header className=\"flex-row px-1\">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\r\n          -Shop-Shop\r\n        </Link>\r\n      </h1>\r\n\r\n      <nav>\r\n        {showNavigation()}\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","// import { useReducer } from \"react\";\r\nimport {\r\n\tUPDATE_PRODUCTS,\r\n\tADD_TO_CART,\r\n\tUPDATE_CART_QUANTITY,\r\n\tREMOVE_FROM_CART,\r\n\tADD_MULTIPLE_TO_CART,\r\n\tUPDATE_CATEGORIES,\r\n\tUPDATE_CURRENT_CATEGORY,\r\n\tCLEAR_CART,\r\n\tTOGGLE_CART,\r\n} from \"./actions\";\r\n\r\n//define initial state\r\nconst initialState = {\r\n\tproducts: [],\r\n\tcategories: [],\r\n\tcurrentCategory: \"\",\r\n\tcart: [],\r\n\tcartOpen: false,\r\n};\r\n\r\nexport const reducers = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase UPDATE_PRODUCTS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tproducts: [...action.products],\r\n\t\t\t};\r\n\r\n\t\tcase ADD_TO_CART:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcartOpen: true,\r\n\t\t\t\tcart: [...state.cart, action.product],\r\n\t\t\t};\r\n\r\n\t\tcase ADD_MULTIPLE_TO_CART:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcart: [...state.cart, ...action.products],\r\n\t\t\t};\r\n\r\n\t\tcase UPDATE_CART_QUANTITY:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcartOpen: true,\r\n\t\t\t\tcart: state.cart.map((product) => {\r\n\t\t\t\t\tif (action._id === product._id) {\r\n\t\t\t\t\t\tproduct.purchaseQuantity = action.purchaseQuantity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn product;\r\n\t\t\t\t}),\r\n\t\t\t};\r\n\r\n\t\tcase REMOVE_FROM_CART:\r\n\t\t\tlet newState = state.cart.filter((product) => {\r\n\t\t\t\treturn product._id !== action._id;\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcartOpen: newState.length > 0,\r\n\t\t\t\tcart: newState,\r\n\t\t\t};\r\n\r\n\t\tcase CLEAR_CART:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcartOpen: false,\r\n\t\t\t\tcart: [],\r\n\t\t\t};\r\n\r\n\t\tcase TOGGLE_CART:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcartOpen: !state.cartOpen,\r\n\t\t\t};\r\n\r\n\t\tcase UPDATE_CATEGORIES:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcategories: [...action.categories],\r\n\t\t\t};\r\n\r\n\t\tcase UPDATE_CURRENT_CATEGORY:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcurrentCategory: action.currentCategory,\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\nexport default reducers;\r\n\r\n// export function useProductReducer(initialState) {\r\n//   return useReducer(reducer, initialState)\r\n// }\r\n","import { createStore } from \"redux\";\r\nimport reducers from \"./reducers\";\r\nconst store = createStore(reducers);\r\n\r\nexport default store;\r\n","import React, { useEffect } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport Jumbotron from '../components/Jumbotron';\r\nimport { ADD_ORDER } from '../utils/mutations';\r\nimport { idbPromise } from '../utils/helpers';\r\n\r\nfunction Success() {\r\n  const [addOrder] = useMutation(ADD_ORDER);\r\n\r\n  useEffect(() => {\r\n    async function saveOrder() {\r\n      const cart = await idbPromise('cart', 'get');\r\n      const products = cart.map((item) => item._id);\r\n\r\n      if (products.length) {\r\n        const { data } = await addOrder({ variables: { products } });\r\n        const productData = data.addOrder.products;\r\n\r\n        productData.forEach((item) => {\r\n          idbPromise('cart', 'delete', item);\r\n        });\r\n      }\r\n\r\n      setTimeout(() => {\r\n        window.location.assign('/');\r\n      }, 3000);\r\n    }\r\n\r\n    saveOrder();\r\n  }, [addOrder]);\r\n\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>Success!</h1>\r\n        <h2>Thank you for your purchase!</h2>\r\n        <h2>You will now be redirected to the home page</h2>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Success;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_USER } from '../utils/queries';\r\n\r\nfunction OrderHistory() {\r\n  const { data } = useQuery(QUERY_USER);\r\n  let user;\r\n\r\n  if (data) {\r\n    user = data.user;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-1\">\r\n        <Link to=\"/\">← Back to Products</Link>\r\n\r\n        {user ? (\r\n          <>\r\n            <h2>\r\n              Order History for {user.firstName} {user.lastName}\r\n            </h2>\r\n            {user.orders.map((order) => (\r\n              <div key={order._id} className=\"my-2\">\r\n                <h3>\r\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\r\n                </h3>\r\n                <div className=\"flex-row\">\r\n                  {order.products.map(({ _id, image, name, price }, index) => (\r\n                    <div key={index} className=\"card px-1 py-1\">\r\n                      <Link to={`/products/${_id}`}>\r\n                        <img alt={name} src={`/images/${image}`} />\r\n                        <p>{name}</p>\r\n                      </Link>\r\n                      <div>\r\n                        <span>${price}</span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OrderHistory;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport {\r\n\tApolloClient,\r\n\tInMemoryCache,\r\n\tApolloProvider,\r\n\tcreateHttpLink,\r\n} from \"@apollo/client\";\r\nimport { setContext } from \"@apollo/client/link/context\";\r\n\r\nimport Home from \"./pages/Home\";\r\nimport Detail from \"./pages/Detail\";\r\nimport NoMatch from \"./pages/NoMatch\";\r\nimport Login from \"./pages/Login\";\r\nimport Signup from \"./pages/Signup\";\r\nimport Nav from \"./components/Nav\";\r\n//import { StoreProvider } from './utils/GlobalState';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./utils/store\";\r\nimport Success from \"./pages/Success\";\r\nimport OrderHistory from \"./pages/OrderHistory\";\r\n\r\nconst httpLink = createHttpLink({\r\n\turi: \"/graphql\",\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n\tconst token = localStorage.getItem(\"id_token\");\r\n\treturn {\r\n\t\theaders: {\r\n\t\t\t...headers,\r\n\t\t\tauthorization: token ? `Bearer ${token}` : \"\",\r\n\t\t},\r\n\t};\r\n});\r\n\r\nconst client = new ApolloClient({\r\n\tlink: authLink.concat(httpLink),\r\n\tcache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<ApolloProvider client={client}>\r\n\t\t\t<Router>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Provider store={store}>\r\n\t\t\t\t\t\t<Nav />\r\n\t\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t\t<Route exact path=\"/\" component={Home} />\r\n\t\t\t\t\t\t\t<Route exact path=\"/login\" component={Login} />\r\n\t\t\t\t\t\t\t<Route exact path=\"/signup\" component={Signup} />\r\n\t\t\t\t\t\t\t<Route exact path=\"/success\" component={Success} />\r\n\t\t\t\t\t\t\t<Route exact path=\"/orderHistory\" component={OrderHistory} />\r\n\t\t\t\t\t\t\t<Route exact path=\"/products/:id\" component={Detail} />\r\n\t\t\t\t\t\t\t<Route component={NoMatch} />\r\n\t\t\t\t\t\t</Switch>\r\n\t\t\t\t\t</Provider>\r\n\t\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t</ApolloProvider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (\r\n    process.env.NODE_ENV === 'production' &&\r\n    'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}